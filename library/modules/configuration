--[[
WindUI Configuration Module
Version: 1.0.0
Description: A module for saving/loading WindUI themes and settings
GitHub: https://github.com/yourusername/WindUI-Config
]]

local HttpService = game:GetService("HttpService")

local WindUIConfig = {}
WindUIConfig.__index = WindUIConfig

-- Initialize the configuration module
-- @param uiLibrary: The WindUI library instance
-- @param windowInstance: The Window instance
-- @return: New WindUIConfig instance
function WindUIConfig.new(uiLibrary, windowInstance)
    local self = setmetatable({}, WindUIConfig)
    
    -- Validate parameters
    if not uiLibrary or not windowInstance then
        error("WindUIConfig requires both uiLibrary and windowInstance parameters")
    end
    
    self.WindUI = uiLibrary
    self.Window = windowInstance
    self.folderPath = "WindUI"
    
    -- Create config folder if it doesn't exist
    if not isfolder then
        error("This module requires the 'isfolder' function (typically available in exploit environments)")
    end
    
    if not isfolder(self.folderPath) then
        makefolder(self.folderPath)
    end
    
    return self
end

-- Save data to a JSON file
-- @param fileName: Name of the file (without extension)
-- @param data: Table of data to save
function WindUIConfig:SaveFile(fileName, data)
    if not fileName or type(fileName) ~= "string" then
        error("FileName must be a string")
    end
    
    local filePath = self.folderPath .. "/" .. fileName .. ".json"
    local success, jsonData = pcall(HttpService.JSONEncode, HttpService, data)
    
    if not success then
        warn("Failed to encode data to JSON:", jsonData)
        return false
    end
    
    writefile(filePath, jsonData)
    return true
end

-- Load data from a JSON file
-- @param fileName: Name of the file (without extension)
-- @return: Table with loaded data or nil if file doesn't exist
function WindUIConfig:LoadFile(fileName)
    local filePath = self.folderPath .. "/" .. fileName .. ".json"
    
    if not isfile(filePath) then
        return nil
    end
    
    local success, jsonData = pcall(readfile, filePath)
    if not success then
        warn("Failed to read file:", jsonData)
        return nil
    end
    
    local success, decodedData = pcall(HttpService.JSONDecode, HttpService, jsonData)
    if not success then
        warn("Failed to decode JSON:", decodedData)
        return nil
    end
    
    return decodedData
end

-- List all available config files
-- @return: Table of file names (without extensions)
function WindUIConfig:ListFiles()
    local files = {}
    
    if not listfiles then
        warn("listfiles function not available")
        return files
    end
    
    for _, file in ipairs(listfiles(self.folderPath)) do
        local fileName = file:match("([^/]+)%.json$")
        if fileName then
            table.insert(files, fileName)
        end
    end
    
    return files
end

-- Setup the window configuration tab
-- @param tab: The tab instance to setup
function WindUIConfig:SetupWindowTab(tab)
    if not tab then return end
    
    -- Window Settings Section
    tab:AddSection("Window Settings")
    
    local themeValues = {}
    for name, _ in pairs(self.WindUI:GetThemes()) do
        table.insert(themeValues, name)
    end
    
    local themeDropdown = tab:Dropdown({
        Title = "Select Theme",
        Multi = false,
        AllowNone = false,
        Values = themeValues,
        Callback = function(theme)
            self.WindUI:SetTheme(theme)
        end
    })
    themeDropdown:Select(self.WindUI:GetCurrentTheme())
    
    local ToggleTransparency = tab:Toggle({
        Title = "Window Transparency",
        Callback = function(e)
            self.Window:ToggleTransparency(e)
        end,
        Value = self.WindUI:GetTransparency()
    })
    
    -- Save/Load Section
    tab:AddSection("Configuration Management")
    
    local fileNameInput = ""
    tab:Input({
        Title = "Config Name",
        PlaceholderText = "Enter config name",
        Callback = function(text)
            fileNameInput = text
        end
    })
    
    local filesDropdown = tab:Dropdown({
        Title = "Saved Configs",
        Multi = false,
        AllowNone = true,
        Values = self:ListFiles(),
        Callback = function(selectedFile)
            fileNameInput = selectedFile
        end
    })
    
    -- Action Buttons
    tab:Button({
        Title = "Save Config",
        Callback = function()
            if fileNameInput ~= "" then
                local success = self:SaveFile(fileNameInput, {
                    Transparent = self.WindUI:GetTransparency(),
                    Theme = self.WindUI:GetCurrentTheme()
                })
                
                if success then
                    self.WindUI:Notify({
                        Title = "Config Saved",
                        Content = "Configuration saved as: " .. fileNameInput,
                        Duration = 3
                    })
                    filesDropdown:Refresh(self:ListFiles())
                end
            end
        end
    })
    
    tab:Button({
        Title = "Load Config",
        Callback = function()
            if fileNameInput ~= "" then
                local data = self:LoadFile(fileNameInput)
                if data then
                    if data.Transparent ~= nil then
                        self.Window:ToggleTransparency(data.Transparent)
                        ToggleTransparency:SetValue(data.Transparent)
                    end
                    
                    if data.Theme then
                        self.WindUI:SetTheme(data.Theme)
                        themeDropdown:Select(data.Theme)
                    end
                    
                    self.WindUI:Notify({
                        Title = "Config Loaded",
                        Content = "Loaded config: " .. fileNameInput,
                        Duration = 3
                    })
                end
            end
        end
    })
    
    tab:Button({
        Title = "Refresh List",
        Callback = function()
            filesDropdown:Refresh(self:ListFiles())
        end
    })
end

-- Setup the theme creator tab
-- @param tab: The tab instance to setup
function WindUIConfig:SetupThemeTab(tab)
    if not tab then return end
    
    local currentThemeName = self.WindUI:GetCurrentTheme()
    local themes = self.WindUI:GetThemes()
    local currentTheme = themes[currentThemeName] or {}
    
    local ThemeAccent = currentTheme.Accent or "FFFFFF"
    local ThemeOutline = currentTheme.Outline or "000000"
    local ThemeText = currentTheme.Text or "000000"
    local ThemePlaceholderText = currentTheme.PlaceholderText or "808080"
    
    tab:AddSection("Theme Editor")
    
    local themeNameInput = currentThemeName
    tab:Input({
        Title = "Theme Name",
        Value = currentThemeName,
        Callback = function(name)
            themeNameInput = name
        end
    })
    
    local accentColor = Color3.fromHex(ThemeAccent)
    tab:Colorpicker({
        Title = "Accent Color",
        Default = accentColor,
        Callback = function(color)
            accentColor = color
        end
    })
    
    local outlineColor = Color3.fromHex(ThemeOutline)
    tab:Colorpicker({
        Title = "Outline Color",
        Default = outlineColor,
        Callback = function(color)
            outlineColor = color
        end
    })
    
    local textColor = Color3.fromHex(ThemeText)
    tab:Colorpicker({
        Title = "Text Color",
        Default = textColor,
        Callback = function(color)
            textColor = color
        end
    })
    
    local placeholderColor = Color3.fromHex(ThemePlaceholderText)
    tab:Colorpicker({
        Title = "Placeholder Color",
        Default = placeholderColor,
        Callback = function(color)
            placeholderColor = color
        end
    })
    
    tab:Button({
        Title = "Save Theme",
        Callback = function()
            if themeNameInput and themeNameInput ~= "" then
                self.WindUI:AddTheme({
                    Name = themeNameInput,
                    Accent = accentColor:ToHex(),
                    Outline = outlineColor:ToHex(),
                    Text = textColor:ToHex(),
                    PlaceholderText = placeholderColor:ToHex()
                })
                
                self.WindUI:SetTheme(themeNameInput)
                self.WindUI:Notify({
                    Title = "Theme Saved",
                    Content = "Theme '" .. themeNameInput .. "' has been applied",
                    Duration = 3
                })
            end
        end
    })
end

return WindUIConfig
